import React, { useState, useEffect, useCallback } from 'react';
import { View, StyleSheet, ScrollView, Alert, Text, TouchableOpacity, BackHandler } from 'react-native';
import { useRouter, useFocusEffect } from 'expo-router';
import { getUserProfile, clearDatabase } from '~/lib/db';
import { Surface, IconButton, Avatar, Switch, Divider } from 'react-native-paper';
import { LinearGradient } from 'expo-linear-gradient';
import * as Updates from 'expo-updates';
import PageTransition from '../../components/PageTransition';
import { useTheme } from '~/context/ThemeContext';

export default function SettingsScreen() {
  const [profile, setProfile] = useState<any>(null);
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [autoBackupEnabled, setAutoBackupEnabled] = useState(true);
  const [isClearing, setIsClearing] = useState(false);
  const [clearingProgress, setClearingProgress] = useState(0);
  const router = useRouter();
  const { theme, isDark, toggleTheme } = useTheme();
  const { colors } = theme.custom;

  const loadProfile = useCallback(async () => {
    try {
      const userProfile = await getUserProfile();
      setProfile(userProfile);
    } catch {
      console.error('Error loading profile');
    }
  }, []);

  useFocusEffect(
    useCallback(() => {
      loadProfile();
    }, [loadProfile])
  );

  const handleClearData = async () => {
    Alert.alert(
      '‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
      '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®? ‡¶è‡¶á ‡¶ï‡¶æ‡¶ú‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßÄ‡¶Ø‡¶º ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶¨‡ßá‡•§',
      [
        { text: '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤', style: 'cancel' },
        {
          text: '‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
          style: 'destructive',
          onPress: async () => {
            setIsClearing(true);
            setClearingProgress(0);
            
            // 5-second countdown with progress
            for (let i = 1; i <= 5; i++) {
              setClearingProgress((i / 5) * 100);
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            try {
              console.log('üóëÔ∏è Starting database clear process...');
              
              // Clear all data
              await clearDatabase();
              
              console.log('‚úÖ Database cleared successfully');
              
              // Show success message briefly
              Alert.alert(
                '‡¶∏‡¶´‡¶≤',
                '‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...',
                [{ text: '‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá', onPress: () => restartApp() }],
                { cancelable: false }
              );
            } catch (error) {
              console.error('‚ùå Error during database clear:', error);
              setIsClearing(false);
              setClearingProgress(0);
              Alert.alert('‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø', `‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${error}`);
            }
          },
        },
      ]
    );
  };

  const restartApp = async () => {
    try {
      console.log('üîÑ Attempting to restart app...');
      
      // Method 1: Try Expo Updates reload
      console.log('üì± Using Expo Updates reload...');
      await Updates.reloadAsync();
      
    } catch (error) {
      console.error('‚ùå Expo Updates reload failed:', error);
      
      try {
        // Method 3: Try BackHandler exit
        console.log('üö™ Using BackHandler.exitApp()...');
        BackHandler.exitApp();
        
      } catch (backHandlerError) {
        console.error('‚ùå BackHandler failed:', backHandlerError);
        
        // Method 4: Force app restart by clearing all state and navigating
        console.log('üîÑ Using fallback restart method...');
        
        // Reset all state
        setIsClearing(false);
        setClearingProgress(0);
        
        // Clear navigation and go to home
        router.replace('/');
        
        // Force a complete app refresh by clearing cache
        setTimeout(() => {
          console.log('üîÑ Reloading profile and refreshing app...');
          loadProfile();
          
          // Additional refresh trigger
          setTimeout(() => {
            console.log('üîÑ Triggering additional refresh...');
            // Force component re-render
            setProfile(null);
            setTimeout(() => {
              loadProfile();
            }, 100);
            }, 500);
        }, 500);
      }
    }
  };

  const handleExportData = () => {
    Alert.alert('‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø', '‡¶è‡¶á ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶¨‡ßá');
  };

  const handleBackupData = () => {
    Alert.alert('‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™', '‡¶è‡¶á ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶¨‡ßá');
  };

  const handleRestoreData = () => {
    Alert.alert('‡¶™‡ßÅ‡¶®‡¶∞‡ßÅ‡¶¶‡ßç‡¶ß‡¶æ‡¶∞', '‡¶è‡¶á ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶¨‡ßá');
  };

  const handleAbout = () => {
    router.push('/app-info');
  };

  const renderHeader = () => (
    <LinearGradient
      colors={[colors.primary, colors.primary]}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 1 }}
      style={styles.headerGradient}>
      <View style={styles.headerContent}>
        <View style={styles.profileSection}>
          <Avatar.Text
            size={80}
            label={profile?.name ? profile.name.charAt(0).toUpperCase() : 'U'}
            style={[styles.profileAvatar, { backgroundColor: colors.textInverse + '20' }]}
            labelStyle={[styles.profileAvatarText, { color: colors.textInverse }]}
          />
          <View style={styles.profileInfo}>
            <Text style={[styles.userName, { color: colors.textInverse }]}>
              {profile?.name || '‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ'}
            </Text>
            {profile?.business_name && (
              <Text style={[styles.businessName, { color: colors.textInverse + '80' }]}>
                {profile.business_name}
              </Text>
            )}
            <Text style={[styles.email, { color: colors.textInverse + '80' }]}>
              {profile?.email || '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶®‡ßá‡¶á'}
            </Text>
          </View>
        </View>
      </View>
    </LinearGradient>
  );

  const renderSettingItem = (
    icon: string,
    title: string,
    subtitle: string,
    onPress: () => void,
    rightElement?: React.ReactNode,
    showDivider: boolean = true
  ) => (
    <View key={title}>
      <TouchableOpacity
        style={[styles.settingItem, { backgroundColor: colors.surface }]}
        onPress={onPress}
        activeOpacity={0.7}>
        <View style={styles.settingLeft}>
          <View style={[styles.settingIcon, { backgroundColor: colors.secondary + '20' }]}>
            <IconButton icon={icon} size={24} iconColor={colors.secondary} />
          </View>
          <View style={styles.settingText}>
            <Text style={[styles.settingTitle, { color: colors.text }]}>{title}</Text>
            <Text style={[styles.settingSubtitle, { color: colors.textSecondary }]}>
              {subtitle}
            </Text>
          </View>
        </View>
        {rightElement && <View style={styles.settingRight}>{rightElement}</View>}
      </TouchableOpacity>
      {showDivider && <Divider style={[styles.divider, { backgroundColor: colors.border }]} />}
    </View>
  );

  return (
    <PageTransition>
      <View style={[styles.container, { backgroundColor: colors.background }]}>
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          {renderHeader()}

          <View style={styles.content}>
            {/* Profile Section */}
            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}></Text>
              <Surface style={[styles.sectionCard, { backgroundColor: colors.surface }]} elevation={0}>
                {renderSettingItem(
                  'account-edit',
                  '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  '‡¶®‡¶æ‡¶Æ, ‡¶´‡ßã‡¶®, ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
                  () => router.push('/profile-edit'),
                  <IconButton icon="chevron-right" size={24} iconColor={colors.textSecondary} />,
                  false
                )}
              </Surface>
            </View>

            {/* Preferences Section */}
            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>‡¶™‡¶õ‡¶®‡ßç‡¶¶‡¶∏‡¶Æ‡ßÇ‡¶π</Text>
              <Surface style={[styles.sectionCard, { backgroundColor: colors.surface }]} elevation={0}>
                {renderSettingItem(
                  'theme-light-dark',
                  '‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°',
                  '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßá‡¶∞ ‡¶•‡¶ø‡¶Æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
                  () => {},
                  <Switch
                    value={isDark}
                    onValueChange={toggleTheme}
                    color={colors.primary}
                  />,
                  true
                )}
                {renderSettingItem(
                  'bell-outline',
                  '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø',
                  '‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶™‡ßç‡¶§‡¶ø ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®',
                  () => {},
                  <Switch
                    value={notificationsEnabled}
                    onValueChange={setNotificationsEnabled}
                    color={colors.primary}
                  />,
                  true
                )}
                {renderSettingItem(
                  'cloud-upload-outline',
                  '‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™',
                  '‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  () => {},
                  <Switch
                    value={autoBackupEnabled}
                    onValueChange={setAutoBackupEnabled}
                    color={colors.primary}
                  />,
                  false
                )}
              </Surface>
            </View>

            {/* Data Management Section */}
            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ</Text>
              <Surface style={[styles.sectionCard, { backgroundColor: colors.surface }]} elevation={0}>
                {renderSettingItem(
                  'download',
                  '‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶™‡ßç‡¶§‡¶æ‡¶®‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®',
                  '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®',
                  handleExportData,
                  <IconButton icon="chevron-right" size={24} iconColor={colors.textSecondary} />,
                  true
                )}
                {renderSettingItem(
                  'cloud-upload',
                  '‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  '‡¶°‡ßá‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶æ‡¶â‡¶°‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  handleBackupData,
                  <IconButton icon="chevron-right" size={24} iconColor={colors.textSecondary} />,
                  true
                )}
                {renderSettingItem(
                  'cloud-download',
                  '‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßÅ‡¶®‡¶∞‡ßÅ‡¶¶‡ßç‡¶ß‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶Ü‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßÅ‡¶®‡¶∞‡ßÅ‡¶¶‡ßç‡¶ß‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                  handleRestoreData,
                  <IconButton icon="chevron-right" size={24} iconColor={colors.textSecondary} />,
                  true
                )}
                {renderSettingItem(
                  'delete-sweep',
                  '‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®',
                  '‡¶∏‡¶¨ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
                  handleClearData,
                  <IconButton icon="chevron-right" size={24} iconColor={colors.error} />,
                  false
                )}
              </Surface>
            </View>

            {/* App Section */}
            <View style={styles.section}>
              <Text style={[styles.sectionTitle, { color: colors.text }]}>‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™</Text>
              <Surface style={[styles.sectionCard, { backgroundColor: colors.surface }]} elevation={0}>
                {renderSettingItem(
                  'information',
                  '‡¶ü‡¶æ‡¶≤‡¶ø‡¶ñ‡¶æ‡¶§‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá',
                  '‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£ ‡ßß.‡ß¶.‡ß¶ ‚Ä¢ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®',
                  handleAbout,
                  <IconButton icon="chevron-right" size={24} iconColor={colors.textSecondary} />,
                  false
                )}
              </Surface>
            </View>

            <View style={styles.bottomSpacing} />
          </View>
        </ScrollView>
        
        {/* Loading Overlay for Data Clearing */}
        {isClearing && (
          <View style={styles.loadingOverlay}>
            <View style={[styles.loadingCard, { backgroundColor: colors.surface }]}>
              <Text style={[styles.loadingTitle, { color: colors.text }]}>
                ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
              </Text>
              <Text style={[styles.loadingSubtitle, { color: colors.textSecondary }]}>
                ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
              </Text>
              
              {/* Progress Bar */}
              <View style={[styles.progressContainer, { backgroundColor: colors.border }]}>
                <View 
                  style={[
                    styles.progressBar, 
                    { 
                      backgroundColor: colors.primary,
                      width: `${clearingProgress}%` 
                    }
                  ]} 
                />
              </View>
              
              <Text style={[styles.progressText, { color: colors.textSecondary }]}>
                {Math.round(clearingProgress)}% ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®
              </Text>
            </View>
          </View>
        )}
      </View>
    </PageTransition>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  headerGradient: {
    paddingTop: 60,
    paddingBottom: 30,
    paddingHorizontal: 20,
  },
  headerContent: {
    alignItems: 'center',
  },
  profileSection: {
    alignItems: 'center',
  },
  profileAvatar: {
    marginBottom: 16,
  },
  profileAvatarText: {
    fontSize: 32,
    fontWeight: 'bold',
  },
  profileInfo: {
    alignItems: 'center',
  },
  userName: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
    textAlign: 'center',
  },
  businessName: {
    fontSize: 16,
    marginBottom: 4,
    textAlign: 'center',
  },
  email: {
    fontSize: 14,
    textAlign: 'center',
  },
  content: {
    paddingHorizontal: 20,
    marginTop: -20,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 12,
    marginLeft: 4,
  },
  sectionCard: {
    borderRadius: 16,
    overflow: 'hidden',
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  settingIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  settingText: {
    flex: 1,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 2,
  },
  settingSubtitle: {
    fontSize: 14,
    opacity: 0.7,
  },
  settingRight: {
    marginLeft: 16,
  },
  divider: {
    marginHorizontal: 16,
  },
  bottomSpacing: {
    height: 100,
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  loadingCard: {
    padding: 30,
    borderRadius: 20,
    alignItems: 'center',
    elevation: 10,
    minWidth: 250,
  },
  loadingTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
    textAlign: 'center',
  },
  loadingSubtitle: {
    fontSize: 16,
    marginBottom: 20,
    textAlign: 'center',
    opacity: 0.8,
  },
  progressContainer: {
    width: '100%',
    height: 8,
    borderRadius: 4,
    marginBottom: 15,
    overflow: 'hidden',
  },
  progressBar: {
    height: '100%',
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    fontWeight: '600',
  },
});
